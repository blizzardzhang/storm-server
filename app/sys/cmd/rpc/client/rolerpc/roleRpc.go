// Code generated by goctl. DO NOT EDIT.
// Source: sys.proto

package rolerpc

import (
	"context"

	"storm-server/app/sys/cmd/rpc/sysClient"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddAppReq               = sysClient.AddAppReq
	AddAppResp              = sysClient.AddAppResp
	AddDepartmentReq        = sysClient.AddDepartmentReq
	AddDepartmentResp       = sysClient.AddDepartmentResp
	AddPermissionReq        = sysClient.AddPermissionReq
	AddPermissionResp       = sysClient.AddPermissionResp
	AddRoleReq              = sysClient.AddRoleReq
	AddRoleResp             = sysClient.AddRoleResp
	AppInfoReq              = sysClient.AppInfoReq
	AppInfoResp             = sysClient.AppInfoResp
	DeleteAppReq            = sysClient.DeleteAppReq
	DeleteAppResp           = sysClient.DeleteAppResp
	DeleteDepartmentReq     = sysClient.DeleteDepartmentReq
	DeleteDepartmentResp    = sysClient.DeleteDepartmentResp
	DeletePermissionReq     = sysClient.DeletePermissionReq
	DeletePermissionResp    = sysClient.DeletePermissionResp
	DeleteRoleReq           = sysClient.DeleteRoleReq
	DeleteRoleResp          = sysClient.DeleteRoleResp
	DeleteUserReq           = sysClient.DeleteUserReq
	DeleteUserResp          = sysClient.DeleteUserResp
	DepartmentInfoReq       = sysClient.DepartmentInfoReq
	DepartmentInfoResp      = sysClient.DepartmentInfoResp
	GetRolePermissionReq    = sysClient.GetRolePermissionReq
	GetRolePermissionResp   = sysClient.GetRolePermissionResp
	GetUerRoleReq           = sysClient.GetUerRoleReq
	GetUerRoleResp          = sysClient.GetUerRoleResp
	GrantRolePermissionReq  = sysClient.GrantRolePermissionReq
	GrantRolePermissionResp = sysClient.GrantRolePermissionResp
	GrantRoleReq            = sysClient.GrantRoleReq
	GrantRoleResp           = sysClient.GrantRoleResp
	ListAppReq              = sysClient.ListAppReq
	ListAppResp             = sysClient.ListAppResp
	ListDepartmentReq       = sysClient.ListDepartmentReq
	ListDepartmentResp      = sysClient.ListDepartmentResp
	ListPermissionReq       = sysClient.ListPermissionReq
	ListPermissionResp      = sysClient.ListPermissionResp
	ListRoleReq             = sysClient.ListRoleReq
	ListRoleResp            = sysClient.ListRoleResp
	LoginReq                = sysClient.LoginReq
	LoginResp               = sysClient.LoginResp
	PermissionInfoReq       = sysClient.PermissionInfoReq
	PermissionInfoResp      = sysClient.PermissionInfoResp
	RoleInfoReq             = sysClient.RoleInfoReq
	RoleInfoResp            = sysClient.RoleInfoResp
	UerInfoReq              = sysClient.UerInfoReq
	UpdateAppReq            = sysClient.UpdateAppReq
	UpdateAppResp           = sysClient.UpdateAppResp
	UpdateDepartmentReq     = sysClient.UpdateDepartmentReq
	UpdateDepartmentResp    = sysClient.UpdateDepartmentResp
	UpdatePermissionReq     = sysClient.UpdatePermissionReq
	UpdatePermissionResp    = sysClient.UpdatePermissionResp
	UpdateRoleReq           = sysClient.UpdateRoleReq
	UpdateRoleResp          = sysClient.UpdateRoleResp
	UpdateUserReq           = sysClient.UpdateUserReq
	UpdateUserResp          = sysClient.UpdateUserResp
	UserInfo                = sysClient.UserInfo
	UserInfoResp            = sysClient.UserInfoResp
	UserListReq             = sysClient.UserListReq
	UserListResp            = sysClient.UserListResp

	RoleRpc interface {
		RoleAdd(ctx context.Context, in *AddRoleReq, opts ...grpc.CallOption) (*AddRoleResp, error)
		RoleInfo(ctx context.Context, in *RoleInfoReq, opts ...grpc.CallOption) (*RoleInfoResp, error)
		RoleList(ctx context.Context, in *ListRoleReq, opts ...grpc.CallOption) (*ListRoleResp, error)
		RoleUpdate(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleResp, error)
		RoleDelete(ctx context.Context, in *DeleteRoleReq, opts ...grpc.CallOption) (*DeleteRoleResp, error)
		RoleGrantPermission(ctx context.Context, in *GrantRolePermissionReq, opts ...grpc.CallOption) (*GrantRolePermissionResp, error)
	}

	defaultRoleRpc struct {
		cli zrpc.Client
	}
)

func NewRoleRpc(cli zrpc.Client) RoleRpc {
	return &defaultRoleRpc{
		cli: cli,
	}
}

func (m *defaultRoleRpc) RoleAdd(ctx context.Context, in *AddRoleReq, opts ...grpc.CallOption) (*AddRoleResp, error) {
	client := sysClient.NewRoleRpcClient(m.cli.Conn())
	return client.RoleAdd(ctx, in, opts...)
}

func (m *defaultRoleRpc) RoleInfo(ctx context.Context, in *RoleInfoReq, opts ...grpc.CallOption) (*RoleInfoResp, error) {
	client := sysClient.NewRoleRpcClient(m.cli.Conn())
	return client.RoleInfo(ctx, in, opts...)
}

func (m *defaultRoleRpc) RoleList(ctx context.Context, in *ListRoleReq, opts ...grpc.CallOption) (*ListRoleResp, error) {
	client := sysClient.NewRoleRpcClient(m.cli.Conn())
	return client.RoleList(ctx, in, opts...)
}

func (m *defaultRoleRpc) RoleUpdate(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleResp, error) {
	client := sysClient.NewRoleRpcClient(m.cli.Conn())
	return client.RoleUpdate(ctx, in, opts...)
}

func (m *defaultRoleRpc) RoleDelete(ctx context.Context, in *DeleteRoleReq, opts ...grpc.CallOption) (*DeleteRoleResp, error) {
	client := sysClient.NewRoleRpcClient(m.cli.Conn())
	return client.RoleDelete(ctx, in, opts...)
}

func (m *defaultRoleRpc) RoleGrantPermission(ctx context.Context, in *GrantRolePermissionReq, opts ...grpc.CallOption) (*GrantRolePermissionResp, error) {
	client := sysClient.NewRoleRpcClient(m.cli.Conn())
	return client.RoleGrantPermission(ctx, in, opts...)
}
