// Code generated by goctl. DO NOT EDIT.
// Source: sys.proto

package server

import (
	"context"

	"storm-server/app/sys/cmd/rpc/internal/logic/rolerpc"
	"storm-server/app/sys/cmd/rpc/internal/svc"
	"storm-server/app/sys/cmd/rpc/sysClient"
)

type RoleRpcServer struct {
	svcCtx *svc.ServiceContext
	sysClient.UnimplementedRoleRpcServer
}

func NewRoleRpcServer(svcCtx *svc.ServiceContext) *RoleRpcServer {
	return &RoleRpcServer{
		svcCtx: svcCtx,
	}
}

func (s *RoleRpcServer) RoleAdd(ctx context.Context, in *sysClient.AddRoleReq) (*sysClient.AddRoleResp, error) {
	l := rolerpclogic.NewRoleAddLogic(ctx, s.svcCtx)
	return l.RoleAdd(in)
}

func (s *RoleRpcServer) RoleInfo(ctx context.Context, in *sysClient.RoleInfoReq) (*sysClient.RoleInfoResp, error) {
	l := rolerpclogic.NewRoleInfoLogic(ctx, s.svcCtx)
	return l.RoleInfo(in)
}

func (s *RoleRpcServer) RoleList(ctx context.Context, in *sysClient.ListRoleReq) (*sysClient.ListRoleResp, error) {
	l := rolerpclogic.NewRoleListLogic(ctx, s.svcCtx)
	return l.RoleList(in)
}

func (s *RoleRpcServer) RoleUpdate(ctx context.Context, in *sysClient.UpdateRoleReq) (*sysClient.UpdateRoleResp, error) {
	l := rolerpclogic.NewRoleUpdateLogic(ctx, s.svcCtx)
	return l.RoleUpdate(in)
}

func (s *RoleRpcServer) RoleDelete(ctx context.Context, in *sysClient.DeleteRoleReq) (*sysClient.DeleteRoleResp, error) {
	l := rolerpclogic.NewRoleDeleteLogic(ctx, s.svcCtx)
	return l.RoleDelete(in)
}

func (s *RoleRpcServer) RoleGrantPermission(ctx context.Context, in *sysClient.GrantRolePermissionReq) (*sysClient.GrantRolePermissionResp, error) {
	l := rolerpclogic.NewRoleGrantPermissionLogic(ctx, s.svcCtx)
	return l.RoleGrantPermission(in)
}
